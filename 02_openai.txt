ingest.py

from openai import OpenAI
import os
import numpy as np
import faiss
import json
import os

# Set your OpenAI API key directly or use environment variables
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY") or "your-api-key-here")

# Simulated Jira data (replace with real data from API later)
jira_issues = [
    {
        "id": "JIRA-101",
        "summary": "Login failure on invalid credentials",
        "description": """
            Given I am on the login page
            When I enter invalid username and password
            Then I should see an error message
        """
    },
    {
        "id": "JIRA-102",
        "summary": "Password reset should be redirected",
        "description": """
            Given I forgot my password
            When I click on reset link in email
            Then I should be redirected to a reset form
        """
    },
    {
        "id": "JIRA-103",
        "summary": "Search fails with special characters",
        "description": """
            Given I am logged in
            When I search using special characters like #, @, %
            Then no results are shown or app crashes
        """
    },
    {
        "id": "JIRA-104",
        "summary": "User profile update success message",
        "description": """
            Given I have updated my profile details
            When I save changes
            Then I should see a confirmation message
        """
    },
    {
        "id": "JIRA-105",
        "summary": "Update cart after adding item",
        "description": """
            Given I add a product to cart
            When I check the cart
            Then the item count should increase by one
        """
    },
    {
        "id": "JIRA-106",
        "summary": "Checkout should work for guest users",
        "description": """
            Given I am not logged in
            When I go to checkout
            Then I should be prompted to login or continue as guest
        """
    },
    {
        "id": "JIRA-107",
        "summary": "Mobile view should be responsive",
        "description": """
            Given I open site on mobile browser
            When I navigate to any page
            Then the layout should remain responsive and clean
        """
    },
    {
        "id": "JIRA-108",
        "summary": "Notification banner for new message",
        "description": """
            Given I receive a new message
            When I am on dashboard
            Then a notification banner should appear
        """
    },
    {
        "id": "JIRA-109",
        "summary": "Apply Dark mode theme",
        "description": """
            Given I toggle dark mode
            When I reload the page
            Then the dark theme should persist
        """
    },
    {
        "id": "JIRA-110",
        "summary": "Search result details should be correct",
        "description": """
            Given I perform a search
            When I click on result links
            Then they should open correct detail pages
        """
    },
]

documents = [f"{issue['summary']} {issue['description']}" for issue in jira_issues]

def get_embedding(text: str):
    response = client.embeddings.create(model="text-embedding-3-small",
    input=text)
    return response.data[0].embedding

# Generate embeddings
embeddings = [get_embedding(doc) for doc in documents]
embeddings_np = np.array(embeddings).astype("float32")

# Save embeddings and FAISS index
np.save("embeddings.npy", embeddings_np)

dimension = embeddings_np.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(embeddings_np)
faiss.write_index(index, "index_store.faiss")

# Save metadata
with open("jira_issues.json", "w") as f:
    json.dump(jira_issues, f, indent=2)

------------------------------------------------------------------------------------------------------------------------
main.py

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import json
import numpy as np
import faiss
from openai import OpenAI

import os


app = FastAPI()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY") or "your-api-key-here")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class BugReport(BaseModel):
    summary: str
    description: str

with open("jira_issues.json", "r") as f:
    jira_issues = json.load(f)

embeddings = np.load("embeddings.npy")
index = faiss.read_index("index_store.faiss")

def get_embedding(text: str):
    response = client.embeddings.create(model="text-embedding-3-small",
    input=text)
    return response.data[0].embedding

@app.post("/search")
def search_bug(report: BugReport):
    query = f"{report.summary} {report.description}"
    query_vector = np.array([get_embedding(query)]).astype("float32")

    similarity, indices = index.search(query_vector, k=5)

    results = []
    for score, idx in zip(similarity[0], indices[0]):
        if idx < len(jira_issues) and score < 1.0:
            results.append({
                "issue": jira_issues[idx],
                "similarity": f"{round(float(score) * 100, 2)}%"
            })

    return {"matches": results}
